name: Test Dev Pipeline

permissions:
  id-token: write
  contents: read

on:
  workflow_dispatch:
    inputs:
      choosePipeline:
        description: 'Choose pipeline to run'
        required: true
        default: 'getConfiguration'
        type: choice
        options:
          - startApplication
          - restartApplication
          - stopApplication
          - getConfiguration
          - setConfiguration
          - delConfiguration
          - buildAndPushNewImage
          - changeImage
      filePath:
        description: '[=] setConfiguration only. The path to the file itself from root of directory (foo/bar/configuration.yaml)'
        required: false
        default: 'configuration/athena-lg-applications/settings.DEV.json'
        type: string
      settingsToDelete:
        description: '[=] delConfiguration only. The settings you want to remove space seperated like (FOO hello)'
        required: false
        default: ' '
        type: string
      imageDetails:
        description: '[=] For buildAndPushNewImage/changeImage. The image repository and tag (e.g. "ai/dual-graphs:v1")'
        required: false
        default: 'ai/dual-graphs-athena-lg:test-langgraph-explorer'
        type: string
      appName:
        description: 'Application name'
        required: true
        type: string
      resourceGroupName:
        description: 'Resource group name'
        required: true
        type: string
      type:
        description: 'Application type (webapp, functionapp)'
        required: true
        default: 'webapp'
        type: string
      environment:
        description: 'Environment (dev, qa, prod)'
        required: true
        default: 'dev'
        type: string
      containerRegistries:
        description: 'Container registry name (used for both dev and qa)'
        required: true
        type: string

jobs:
  ### APPLICATION ###
  start-application:
    if: ${{ github.event.inputs.choosePipeline == 'startApplication' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout main repository
        uses: actions/checkout@v3

      - name: Checkout private repository
        uses: actions/checkout@v3
        with:
          repository: test-ado-integration/webapp-pipelines
          path: private-repo
          token: ${{ secrets.REPO_SCOPE_PAT }}

      - name: Run Azure App Service Start
        uses: azure/CLI@v1
        with:
          azcliversion: latest
          inlineScript: |
            # Login to Azure
            echo '${{ secrets.AZURE_CREDENTIALS }}' > azure-credentials.json
            az login --service-principal -u $(jq -r .clientId azure-credentials.json) -p $(jq -r .clientSecret azure-credentials.json) --tenant $(jq -r .tenantId azure-credentials.json)
            
            # Start Azure App Service
            az webapp start --name ${{ github.event.inputs.appName }} \
                          --resource-group ${{ github.event.inputs.resourceGroupName }}

  restart-application:
    if: ${{ github.event.inputs.choosePipeline == 'restartApplication' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout main repository
        uses: actions/checkout@v3

      - name: Checkout private repository
        uses: actions/checkout@v3
        with:
          repository: test-ado-integration/webapp-pipelines
          path: private-repo
          token: ${{ secrets.REPO_SCOPE_PAT }}

      - name: Run Azure App Service Restart
        uses: azure/CLI@v1
        with:
          azcliversion: latest
          inlineScript: |
            # Login to Azure
            echo '${{ secrets.AZURE_CREDENTIALS }}' > azure-credentials.json
            az login --service-principal -u $(jq -r .clientId azure-credentials.json) -p $(jq -r .clientSecret azure-credentials.json) --tenant $(jq -r .tenantId azure-credentials.json)
            
            # Restart Azure App Service
            az webapp restart --name ${{ github.event.inputs.appName }} \
                           --resource-group ${{ github.event.inputs.resourceGroupName }}

  stop-application:
    if: ${{ github.event.inputs.choosePipeline == 'stopApplication' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout main repository
        uses: actions/checkout@v3

      - name: Checkout private repository
        uses: actions/checkout@v3
        with:
          repository: test-ado-integration/webapp-pipelines
          path: private-repo
          token: ${{ secrets.REPO_SCOPE_PAT }}

      - name: Run Azure App Service Stop
        uses: azure/CLI@v1
        with:
          azcliversion: latest
          inlineScript: |
            # Login to Azure
            echo '${{ secrets.AZURE_CREDENTIALS }}' > azure-credentials.json
            az login --service-principal -u $(jq -r .clientId azure-credentials.json) -p $(jq -r .clientSecret azure-credentials.json) --tenant $(jq -r .tenantId azure-credentials.json)
            
            # Stop Azure App Service
            az webapp stop --name ${{ github.event.inputs.appName }} \
                        --resource-group ${{ github.event.inputs.resourceGroupName }}

  ### CONFIGURATION ###
  get-configuration:
    if: ${{ github.event.inputs.choosePipeline == 'getConfiguration' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout main repository
        uses: actions/checkout@v3

      - name: Checkout private repository
        uses: actions/checkout@v3
        with:
          repository: test-ado-integration/webapp-pipelines
          path: private-repo
          token: ${{ secrets.REPO_SCOPE_PAT }}

      - name: Run Azure App Service Get Config
        uses: azure/CLI@v1
        with:
          azcliversion: latest
          inlineScript: |
            # Login to Azure
            echo '${{ secrets.AZURE_CREDENTIALS }}' > azure-credentials.json
            az login --service-principal -u $(jq -r .clientId azure-credentials.json) -p $(jq -r .clientSecret azure-credentials.json) --tenant $(jq -r .tenantId azure-credentials.json)
            
            # Get App Service Configuration
            az webapp config appsettings list --name ${{ github.event.inputs.appName }} \
                                          --resource-group ${{ github.event.inputs.resourceGroupName }} \
                                          --output json

  set-configuration:
    if: ${{ github.event.inputs.choosePipeline == 'setConfiguration' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout main repository
        uses: actions/checkout@v3

      - name: Checkout private repository
        uses: actions/checkout@v3
        with:
          repository: test-ado-integration/webapp-pipelines
          path: private-repo
          token: ${{ secrets.REPO_SCOPE_PAT }}

      - name: Run Azure App Service Set Config
        uses: azure/CLI@v1
        with:
          azcliversion: latest
          inlineScript: |
            # Login to Azure
            echo '${{ secrets.AZURE_CREDENTIALS }}' > azure-credentials.json
            az login --service-principal -u $(jq -r .clientId azure-credentials.json) -p $(jq -r .clientSecret azure-credentials.json) --tenant $(jq -r .tenantId azure-credentials.json)
            
            # Set App Service Configuration from file
            settings="$(cat ${{ github.event.inputs.filePath }})"
            az webapp config appsettings set --name ${{ github.event.inputs.appName }} \
                                         --resource-group ${{ github.event.inputs.resourceGroupName }} \
                                         --settings "$settings"

  delete-configuration:
    if: ${{ github.event.inputs.choosePipeline == 'delConfiguration' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout main repository
        uses: actions/checkout@v3

      - name: Checkout private repository
        uses: actions/checkout@v3
        with:
          repository: test-ado-integration/webapp-pipelines
          path: private-repo
          token: ${{ secrets.REPO_SCOPE_PAT }}

      - name: Run Azure App Service Delete Config
        uses: azure/CLI@v1
        with:
          azcliversion: latest
          inlineScript: |
            # Login to Azure
            echo '${{ secrets.AZURE_CREDENTIALS }}' > azure-credentials.json
            az login --service-principal -u $(jq -r .clientId azure-credentials.json) -p $(jq -r .clientSecret azure-credentials.json) --tenant $(jq -r .tenantId azure-credentials.json)
            
            # Get current settings
            settings=$(az webapp config appsettings list --name ${{ github.event.inputs.appName }} \
                                                     --resource-group ${{ github.event.inputs.resourceGroupName }} \
                                                     --output json)
            
            # Delete specified settings
            for setting in ${{ github.event.inputs.settingsToDelete }}; do
              settings=$(echo "$settings" | jq "map(select(.name != \"$setting\"))")
            done
            
            # Update settings
            az webapp config appsettings set --name ${{ github.event.inputs.appName }} \
                                         --resource-group ${{ github.event.inputs.resourceGroupName }} \
                                         --settings "$settings"

  build-and-push-image:
    if: ${{ github.event.inputs.choosePipeline == 'buildAndPushNewImage' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout main repository
        uses: actions/checkout@v3

      - name: Checkout private repository
        uses: actions/checkout@v3
        with:
          repository: test-ado-integration/webapp-pipelines
          path: private-repo
          token: ${{ secrets.REPO_SCOPE_PAT }}

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Build and push image to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ github.event.inputs.containerRegistries }}.azurecr.io
          username: ${{ github.event.inputs.containerRegistries }}
          password: ${{ secrets.DEV_ACR_PASSWORD }}
      
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ github.event.inputs.containerRegistries }}.azurecr.io/${{ github.event.inputs.imageDetails }}

  change-image:
    if: ${{ github.event.inputs.choosePipeline == 'changeImage' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout main repository
        uses: actions/checkout@v3

      - name: Checkout private repository
        uses: actions/checkout@v3
        with:
          repository: test-ado-integration/webapp-pipelines
          path: private-repo
          token: ${{ secrets.REPO_SCOPE_PAT }}

      - name: Run Azure App Service Change Image
        uses: azure/CLI@v1
        with:
          azcliversion: latest
          inlineScript: |
            # Login to Azure
            echo '${{ secrets.AZURE_CREDENTIALS }}' > azure-credentials.json
            az login --service-principal -u $(jq -r .clientId azure-credentials.json) -p $(jq -r .clientSecret azure-credentials.json) --tenant $(jq -r .tenantId azure-credentials.json)
            
            # Update container image
            az webapp config container set --name ${{ github.event.inputs.appName }} \
                                        --resource-group ${{ github.event.inputs.resourceGroupName }} \
                                        --docker-custom-image-name ${{ github.event.inputs.imageName }}