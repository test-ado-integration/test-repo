name: Test Dev Pipeline

permissions:
  id-token: write
  contents: read

on:
  workflow_dispatch:
    inputs:
      choosePipeline:
        description: 'Choose pipeline to run'
        required: true
        default: 'getConfiguration'
        type: choice
        options:
          - startApplication
          - restartApplication
          - stopApplication
          - getConfiguration
          - setConfiguration
          - delConfiguration
          - buildAndPushNewImage
          - changeImage
      filePath:
        description: '[=] setConfiguration only. The path to the file itself from root of directory (foo/bar/configuration.yaml)'
        required: false
        default: 'configuration/athena-lg-applications/settings.DEV.json'
        type: string
      settingsToDelete:
        description: '[=] delConfiguration only. The settings you want to remove space seperated like (FOO hello)'
        required: false
        default: ' '
        type: string
      imageDetails:
        description: '[=] For buildAndPushNewImage/changeImage. The image repository and tag (e.g. "ai/dual-graphs:v1")'
        required: false
        default: 'ai/dual-graphs-athena-lg:test-langgraph-explorer'
        type: string
      appName:
        description: 'Application name'
        required: true
        type: string
      resourceGroupName:
        description: 'Resource group name'
        required: true
        type: string
      type:
        description: 'Application type (webapp, functionapp)'
        required: true
        default: 'webapp'
        type: string
      environment:
        description: 'Environment (dev, qa, prod)'
        required: true
        default: 'dev'
        type: string
      containerRegistries:
        description: 'Container registry name (used for both dev and qa)'
        required: true
        type: string

jobs:
  ### APPLICATION ###
  start-application:
    if: ${{ github.event.inputs.choosePipeline == 'startApplication' }}
    uses: test-ado-integration/webapp-pipelines/.github/workflows/app-service-start.yaml@main
    with:
      appName: ${{ github.event.inputs.appName }}
      resourceGroupName: ${{ github.event.inputs.resourceGroupName }}
      environment: ${{ github.event.inputs.environment }}
      type: ${{ github.event.inputs.type }}
    secrets:
      AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}

  restart-application:
    if: ${{ github.event.inputs.choosePipeline == 'restartApplication' }}
    uses: test-ado-integration/webapp-pipelines/.github/workflows/app-service-restart.yaml@main
    with:
      appName: ${{ github.event.inputs.appName }}
      resourceGroupName: ${{ github.event.inputs.resourceGroupName }}
      environment: ${{ github.event.inputs.environment }}
      type: ${{ github.event.inputs.type }}
    secrets:
      AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}

  stop-application:
    if: ${{ github.event.inputs.choosePipeline == 'stopApplication' }}
    uses: test-ado-integration/webapp-pipelines/.github/workflows/app-service-stop.yaml@main
    with:
      appName: ${{ github.event.inputs.appName }}
      resourceGroupName: ${{ github.event.inputs.resourceGroupName }}
      environment: ${{ github.event.inputs.environment }}
      type: ${{ github.event.inputs.type }}
    secrets:
      AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}

  ### CONFIGURATION ###
  get-configuration:
    if: ${{ github.event.inputs.choosePipeline == 'getConfiguration' }}
    uses: test-ado-integration/webapp-pipelines/.github/workflows/app-get-config.yaml@main
    with:
      appName: ${{ github.event.inputs.appName }}
      resourceGroupName: ${{ github.event.inputs.resourceGroupName }}
      environment: ${{ github.event.inputs.environment }}
      type: ${{ github.event.inputs.type }}
    secrets:
      AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}

  set-configuration:
    if: ${{ github.event.inputs.choosePipeline == 'setConfiguration' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout main repository
        uses: actions/checkout@v3

      - name: Run Azure App Service Set Config
        uses: azure/CLI@v1
        with:
          azcliversion: latest
          inlineScript: |
            # Login to Azure
            echo '${{ secrets.AZURE_CREDENTIALS }}' > azure-credentials.json
            az login --service-principal -u $(jq -r .clientId azure-credentials.json) -p $(jq -r .clientSecret azure-credentials.json) --tenant $(jq -r .tenantId azure-credentials.json)
            
            # Set App Service Configuration from file
            settings="$(cat ${{ github.event.inputs.filePath }})"
            az webapp config appsettings set --name ${{ github.event.inputs.appName }} \
                                         --resource-group ${{ github.event.inputs.resourceGroupName }} \
                                         --settings "$settings"

  delete-configuration:
    if: ${{ github.event.inputs.choosePipeline == 'delConfiguration' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout main repository
        uses: actions/checkout@v3

      - name: Run Azure App Service Delete Config
        uses: azure/CLI@v1
        with:
          azcliversion: latest
          inlineScript: |
            # Login to Azure
            echo '${{ secrets.AZURE_CREDENTIALS }}' > azure-credentials.json
            az login --service-principal -u $(jq -r .clientId azure-credentials.json) -p $(jq -r .clientSecret azure-credentials.json) --tenant $(jq -r .tenantId azure-credentials.json)
            
            # Get current settings
            settings=$(az webapp config appsettings list --name ${{ github.event.inputs.appName }} \
                                                     --resource-group ${{ github.event.inputs.resourceGroupName }} \
                                                     --output json)
            
            # Delete specified settings
            for setting in ${{ github.event.inputs.settingsToDelete }}; do
              settings=$(echo "$settings" | jq "map(select(.name != \"$setting\"))")
            done
            
            # Update settings
            az webapp config appsettings set --name ${{ github.event.inputs.appName }} \
                                         --resource-group ${{ github.event.inputs.resourceGroupName }} \
                                         --settings "$settings"

  build-and-push-image:
    if: ${{ github.event.inputs.choosePipeline == 'buildAndPushNewImage' }}
    uses: test-ado-integration/webapp-pipelines/.github/workflows/build-and-push-image-to-acrs.yaml@main
    with:
      appName: ${{ github.event.inputs.appName }}
      resourceGroupName: ${{ github.event.inputs.resourceGroupName }}
      environment: ${{ github.event.inputs.environment }}
      devContainerRegistry: ${{ github.event.inputs.containerRegistries }}
      qaContainerRegistry: ${{ github.event.inputs.containerRegistries }}
      imageRepositoryAndTag: ${{ github.event.inputs.imageDetails }}
      dockerFile: "./Dockerfile"
      changeImageOnWebapp: false
    secrets:
      AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
      DEV_ACR_PASSWORD: ${{ secrets.DEV_ACR_PASSWORD }}

  change-image:
    if: ${{ github.event.inputs.choosePipeline == 'changeImage' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout main repository
        uses: actions/checkout@v3

      - name: Run Azure App Service Change Image
        uses: azure/CLI@v1
        with:
          azcliversion: latest
          inlineScript: |
            # Login to Azure
            echo '${{ secrets.AZURE_CREDENTIALS }}' > azure-credentials.json
            az login --service-principal -u $(jq -r .clientId azure-credentials.json) -p $(jq -r .clientSecret azure-credentials.json) --tenant $(jq -r .tenantId azure-credentials.json)
            
            # Update container image
            az webapp config container set --name ${{ github.event.inputs.appName }} \
                                        --resource-group ${{ github.event.inputs.resourceGroupName }} \
                                        --docker-custom-image-name ${{ github.event.inputs.containerRegistries }}.azurecr.io/${{ github.event.inputs.imageDetails }}